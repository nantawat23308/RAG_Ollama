[
  Document(page_content=
  '<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="utf-8">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <meta name="description" content="None">\n        \n        \n        <link rel="shortcut icon" href="favicon.ico">\n        \n        <title>Apollo User Libraries</title>\n        <link href="css/bootstrap-custom.min.css" rel="stylesheet">\n        <link href="css/font-awesome.min.css" rel="stylesheet">\n        <link href="css/base.css" rel="stylesheet">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/github.min.css">\n        <link href="extra.css" rel="stylesheet">\n        <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->\n        <!--[if lt IE 9]>\n            <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>\n            <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>\n        <![endif]-->\n\n        <script src="js/jquery-1.10.2.min.js" defer></script>\n        <script src="js/bootstrap-3.0.3.min.js" defer></script>\n        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>\n        <script>hljs.initHighlightingOnLoad();</script> \n    </head>\n\n    <body class="homepage">\n\n        <div class="navbar navbar-default navbar-fixed-top" role="navigation">\n            <div class="container">\n\n                <!-- Collapsed navigation -->\n                <div class="navbar-header">\n                    <!-- Expander button -->\n                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\n                        <span class="sr-only">Toggle navigation</span>\n                        <span class="icon-bar"></span>\n                        <span class="icon-bar"></span>\n                        <span class="icon-bar"></span>\n                    </button>\n                    <a class="navbar-brand" href="index.html">Apollo User Libraries</a>\n                </div>\n\n                <!-- Expanded navigation -->\n                <div class="navbar-collapse collapse">\n                        <!-- Main navigation -->\n                        <ul class="nav navbar-nav">\n                            <li class="active">\n                                <a href="index.html">Home</a>\n                            </li>\n                            <li class="dropdown">\n                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">libs <b class="caret"></b></a>\n                                <ul class="dropdown-menu">\n                                    \n<li >\n    <a href="apollo_libs_cesiumlib.html">cesiumlib</a>\n</li>\n                                    \n<li >\n    <a href="apollo_libs_constants.html">constants</a>\n</li>\n                                    \n<li >\n    <a href="apollo_libs_lib.html">lib</a>\n</li>\n                                    \n<li >\n    <a href="apollo_libs_locking.html">locking</a>\n</li>\n                                    \n<li >\n    <a href="apollo_libs_sequencer_definitions.html">sequencer_definitions</a>\n</li>\n                                    \n<li >\n    <a href="apollo_libs_station_configuration.html">station_configuration</a>\n</li>\n                                    \n  <li class="dropdown-submenu">\n    <a href="#">chambers</a>\n    <ul class="dropdown-menu">\n            \n<li >\n    <a href="apollo_libs_chambers_chamber_utils.html">chamber_utils</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_constants.html">constants</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_handler_base.html">handler_base</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_handler_sim.html">handler_sim</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_map.html">map</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_sequences.html">sequences</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_chambers_steps.html">steps</a>\n</li>\n    </ul>\n  </li>\n                                    \n  <li class="dropdown-submenu">\n    <a href="#">uclim</a>\n    <ul class="dropdown-menu">\n            \n<li >\n    <a href="apollo_libs_uclim_documentation.html">documentation</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_uclim_uclim.html">uclim</a>\n</li>\n            \n<li >\n    <a href="apollo_libs_uclim_uclim_parsing.html">uclim_parsing</a>\n</li>\n    </ul>\n  </li>\n                                </ul>\n                            </li>\n                            <li class="dropdown">\n                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">toolbox <b class="caret"></b></a>\n                                <ul class="dropdown-menu">\n                                    \n<li >\n    <a href="toolbox_buffer_connection_proxy.html">buffer_connection_proxy</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_celery_utils.html">celery_utils</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_cesiumlib_func_appname.html">cesiumlib_func_appname</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_colored_stream_handler.html">colored_stream_handler</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_connection_constants.html">connection_constants</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_connection_proxy.html">connection_proxy</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_constants.html">constants</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_container_utils.html">container_utils</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_daemon.html">daemon</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_decorators.html">decorators</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_echo_connection_proxy.html">echo_connection_proxy</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_exceptions.html">exceptions</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_log_utils.html">log_utils</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_pool.html">pool</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_redis_lib.html">redis_lib</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_registry_utils.html">registry_utils</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_replay_connection_proxy.html">replay_connection_proxy</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_utils.html">utils</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_utils_sys.html">utils_sys</a>\n</li>\n                                    \n<li >\n    <a href="toolbox_wss_utils.html">wss_utils</a>\n</li>\n                                    \n  <li class="dropdown-submenu">\n    <a href="#">retask</a>\n    <ul class="dropdown-menu">\n            \n<li >\n    <a href="toolbox_retask_exceptions.html">exceptions</a>\n</li>\n            \n<li >\n    <a href="toolbox_retask_queue.html">queue</a>\n</li>\n            \n<li >\n    <a href="toolbox_retask_task.html">task</a>\n</li>\n    </ul>\n  </li>\n                                    \n  <li class="dropdown-submenu">\n    <a href="#">workspaces</a>\n    <ul class="dropdown-menu">\n            \n<li >\n    <a href="toolbox_workspaces_attributes.html">attributes</a>\n</li>\n            \n  <li class="dropdown-submenu">\n    <a href="#">tests</a>\n    <ul class="dropdown-menu">\n            \n<li >\n    <a href="toolbox_workspaces_tests_test_attributes.html">test_attributes</a>\n</li>\n    </ul>\n  </li>\n    </ul>\n  </li>\n                                </ul>\n                            </li>\n                        </ul>\n\n                    <ul class="nav navbar-nav navbar-right">\n                        <li>\n                            <a href="#" data-toggle="modal" data-target="#mkdocs_search_modal">\n                                <i class="fa fa-search"></i> Search\n                            </a>\n                        </li>\n\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n        <div class="container">\n                <div class="col-md-3"><div class="bs-sidebar hidden-print affix well" role="complementary">\n    <ul class="nav bs-sidenav">\n        <li class="main active"><a href="#apollo-modules">Apollo modules</a></li>\n            <li><a href="#libscesiumlib">libs.cesiumlib</a></li>\n            <li><a href="#libschamberschamber_utils">libs.chambers.chamber_utils</a></li>\n            <li><a href="#libschambersconstants">libs.chambers.constants</a></li>\n            <li><a href="#libschambershandler_base">libs.chambers.handler_base</a></li>\n            <li><a href="#libschambershandler_sim">libs.chambers.handler_sim</a></li>\n            <li><a href="#libschambersmap">libs.chambers.map</a></li>\n            <li><a href="#libschamberssequences">libs.chambers.sequences</a></li>\n            <li><a href="#libschamberssteps">libs.chambers.steps</a></li>\n            <li><a href="#libsconstants">libs.constants</a></li>\n            <li><a href="#libslib">libs.lib</a></li>\n            <li><a href="#libslocking">libs.locking</a></li>\n            <li><a href="#libssequencer_definitions">libs.sequencer_definitions</a></li>\n            <li><a href="#libsstation_configuration">libs.station_configuration</a></li>\n            <li><a href="#libsuclimdocumentation">libs.uclim.documentation</a></li>\n            <li><a href="#libsuclimuclim">libs.uclim.uclim</a></li>\n            <li><a href="#libsuclimuclim_parsing">libs.uclim.uclim_parsing</a></li>\n            <li><a href="#toolboxbuffer_connection_proxy">toolbox.buffer_connection_proxy</a></li>\n            <li><a href="#toolboxcelery_utils">toolbox.celery_utils</a></li>\n            <li><a href="#toolboxcesiumlib_func_appname">toolbox.cesiumlib_func_appname</a></li>\n            <li><a href="#toolboxcolored_stream_handler">toolbox.colored_stream_handler</a></li>\n            <li><a href="#toolboxconnection_constants">toolbox.connection_constants</a></li>\n            <li><a href="#toolboxconnection_proxy">toolbox.connection_proxy</a></li>\n            <li><a href="#toolboxconstants">toolbox.constants</a></li>\n            <li><a href="#toolboxcontainer_utils">toolbox.container_utils</a></li>\n            <li><a href="#toolboxdaemon">toolbox.daemon</a></li>\n            <li><a href="#toolboxdecorators">toolbox.decorators</a></li>\n            <li><a href="#toolboxecho_connection_proxy">toolbox.echo_connection_proxy</a></li>\n            <li><a href="#toolboxexceptions">toolbox.exceptions</a></li>\n            <li><a href="#toolboxlog_utils">toolbox.log_utils</a></li>\n            <li><a href="#toolboxpool">toolbox.pool</a></li>\n            <li><a href="#toolboxredis_lib">toolbox.redis_lib</a></li>\n            <li><a href="#toolboxregistry_utils">toolbox.registry_utils</a></li>\n            <li><a href="#toolboxreplay_connection_proxy">toolbox.replay_connection_proxy</a></li>\n            <li><a href="#toolboxretaskexceptions">toolbox.retask.exceptions</a></li>\n            <li><a href="#toolboxretaskqueue">toolbox.retask.queue</a></li>\n            <li><a href="#toolboxretasktask">toolbox.retask.task</a></li>\n            <li><a href="#toolboxutils">toolbox.utils</a></li>\n            <li><a href="#toolboxutils_sys">toolbox.utils_sys</a></li>\n            <li><a href="#toolboxworkspacesattributes">toolbox.workspaces.attributes</a></li>\n            <li><a href="#toolboxworkspacesteststest_attributes">toolbox.workspaces.tests.test_attributes</a></li>\n            <li><a href="#toolboxwss_utils">toolbox.wss_utils</a></li>\n    </ul>\n</div></div>\n                <div class="col-md-9" role="main">\n\n<h1 id="apollo-modules">Apollo modules<a class="headerlink" href="#apollo-modules" title="Permanent link">&para;</a></h1>\n<h2 id="libscesiumlib"><a href="apollo_libs_cesiumlib.html">libs.cesiumlib</a><a class="headerlink" href="#libscesiumlib" title="Permanent link">&para;</a></h2>\n<p>This module contains all the helper functions that interact with the cesium server side.</p>\n<p>In here users will find all services that reach out to Cesium for data.*</p>\n<p>* Peruse the apollo.lib for helper functions (e.g. lib.chunk), as well as other\nstandard functions Please read the docstring there, as well.</p>\n<p>In most cases, the object requested will be returned, and if there is any error\nin attempting to get the object, a apexceptions.ServiceFailure will be raised\n--see individual function docstrings.</p>\n<p>Nomenclature:\nproduct_id:  Product ID / PID (e.g. \'CISCO-123\').\n It is what the customer orders\nuut_type:Unit Under Test (UUT) Type (e.g. \'CISCO-123\')\n typically a PID or part number\nMAC address: Media Access Control address, and is a unique identifier assigned\n to network interfaces for communications on the physical network\n segment. MAC addresses are used as a network address for most\n IEEE 802 network technologies, including Ethernet and WiFi.\n Logically, MAC addresses are used in the media access control\n protocol sublayer of the OSI reference model.</p>\n<h2 id="libschamberschamber_utils"><a href="apollo_libs_chambers_chamber_utils.html">libs.chambers.chamber_utils</a><a class="headerlink" href="#libschamberschamber_utils" title="Permanent link">&para;</a></h2>\n<p>Utility functions used by the chambers package.</p>\n<p>To avoid circular imports, this module cannot import from any other chambers package modules except constants.</p>\n<h2 id="libschambersconstants"><a href="apollo_libs_chambers_constants.html">libs.chambers.constants</a><a class="headerlink" href="#libschambersconstants" title="Permanent link">&para;</a></h2>\n<p>Constants used by the chambers package.</p>\n<h2 id="libschambershandler_base"><a href="apollo_libs_chambers_handler_base.html">libs.chambers.handler_base</a><a class="headerlink" href="#libschambershandler_base" title="Permanent link">&para;</a></h2>\n<p>Abstract Base Class for Chamber Handler classes.</p>\n<h2 id="libschambershandler_sim"><a href="apollo_libs_chambers_handler_sim.html">libs.chambers.handler_sim</a><a class="headerlink" href="#libschambershandler_sim" title="Permanent link">&para;</a></h2>\n<p>Simulated chamber handler library.</p>\n<p>This library creates a simulated chamber handler that inherits from ChamberHandlerBase.\nIt can be used to simulate chamber activities in situations where no real chamber exists.\nIt also provides an example for other chamber handler classes to be based on.</p>\n<h2 id="libschambersmap"><a href="apollo_libs_chambers_map.html">libs.chambers.map</a><a class="headerlink" href="#libschambersmap" title="Permanent link">&para;</a></h2>\n<p>Module that maps chamber handler model names to classes.</p>\n<p>Attempts to import the user defined map from apollo.libs.te_libs.chambers.map and add it\'s contents.\nThis would enable the user community to add thier own custom chamber handler classes and select them\nbased on a unique model name.</p>\n<h2 id="libschamberssequences"><a href="apollo_libs_chambers_sequences.html">libs.chambers.sequences</a><a class="headerlink" href="#libschamberssequences" title="Permanent link">&para;</a></h2>\n<p>Chamber controller interface sequence definitions</p>\n<p>Standard sequence definitions that can be used as-is, or a template\nfor customized chamber related steps.</p>\n<h2 id="libschamberssteps"><a href="apollo_libs_chambers_steps.html">libs.chambers.steps</a><a class="headerlink" href="#libschamberssteps" title="Permanent link">&para;</a></h2>\n<p>Chamber controller step functions</p>\n<p>Standard test steps that can be used as-is, or a template\nfor customized chamber related steps.</p>\n<h2 id="libsconstants"><a href="apollo_libs_constants.html">libs.constants</a><a class="headerlink" href="#libsconstants" title="Permanent link">&para;</a></h2>\n<p>Constants module used by the libs package.</p>\n<h2 id="libslib"><a href="apollo_libs_lib.html">libs.lib</a><a class="headerlink" href="#libslib" title="Permanent link">&para;</a></h2>\n<p>Apollo library module for all standard functions.</p>\n<p>Cesium services are found libs.cesiumlib.</p>\n<p>Logging:\nTo use the Apollo logger that logs data to the apollo log and the sequence log:\nlog = logging.getLogger(__name__)\nIf you want a logger object that can send output to the Apollo ui use this syntax:\nmy_ui_logger = logging.getLogger(lib.UI_NAME+__name__)\nYou can use the same debug/info/warning functions to log data to the Apollo UI.</p>\n<p>Connection:\nTo access connection by its name, use lib.conn.xxx where xxx is the name of the connection.\nFor Ex. lib.conn.console</p>\n<p>the "conn" variable gives access to all the connection objects that you have available to a sequence\nbased on its workspace configuration.  If a connection named "UUT_CONSOLE" is present in the configuration,\nthe object "UUT_CONSOLE" is added at runtime by Apollo, and can be used directly--without looking up the\nconnections using lib.getconnections().  For example:  lib.UUT_CONSOLE.send().\nNote: conn is only accessible when INSIDE your sequence or pre-sequence (runtime). It is NOT accessible\nwhen building a _config or _sequence_definition function.</p>\n<p>The "apdicts" object is accessible, directly, and can be used instead of lib.getstepdicts()...\nFurther details can be found in apollo/engine/utils.py</p>\n<p>Ways to use:\n- lib.apdicts.inputdict: Returns input dictionary of the sequence\n- lib.apdicts.userdict: Returns the temporary dictionary that a sequence can use to save temporary data for other steps\n- lib.apdicts.outputdict: The dictionary that the sequence will return as a "result" of the run\n- lib.apdicts.stepdict: Returns a dictionary that shows the step configurations and internal data\n- lib.apdicts.configuration_data: Returns configuration that was added in the _config function for this container\n- lib.apdicts.test_info: Returns the data that was given in the pre-sequence so the sequence gets easy access to it</p>\n<p>Lib.apdicts.test_info attributes (from TestInfo Class in apollo/engine/utils.py):\n- current_status: Returns the current status of the parent sequence (PASS/FAIL)\n- ui_type: Returns string of the UI type of the user who started the container (operator|engineer|cli)\n- test_data: Used to lookup any fields in the TST record of the given serial_number</p>\n<h2 id="libslocking"><a href="apollo_libs_locking.html">libs.locking</a><a class="headerlink" href="#libslocking" title="Permanent link">&para;</a></h2>\n<p>Module with classes and functions that support locking resources.</p>\n<p>Source code for locks were moved to apollo/engine/locks.\nPrevious class names are left here for backward compatability, but wrap the new lock classes.\nUsers should migrate to the new classes as soon as possible.</p>\n<p>Lock classes available:\n* Lock - used by scripts that do NOT run in a container.  For internal use only.\n* ContainerLock - used by any script that runs in an Apollo container.</p>\n<p>Deprecated classes that wrap the new ones listed above:\n* PriorityLock - inherits from Lock, requires a priority value.\n* FIFOLock - inherits from Lock, does not require or use a priority value.\n* ContainerPriorityLock - inherits from ContainerLock, requires a priority value.\n* ContainerFIFOLock - inherits from ContainerLock, does not require or use a priority value.\n* named_priority_lock (depreciated - use ContainerLock instead)</p>\n<p>All lock types take the following arguments:\n* resource_name - name of \'thing\' you want to lock.\n* wait_timeout - Float number of seconds to wait for a lock before raising an ApolloException.  If\nleft blank, the default is 0 (infinite - 1 year)\n* release_timeout - Integer number of seconds to hold a lock before it expires.  If left blank,\ndefault is 0 (infinite - 1 year).  As a rule, try to set for twice the time you expect to\nneed the lock for.\n* priority - Integer priority number, 1 being the highest.  If left blank, default is 900.</p>\n<p>Locks are stored in the Redis database, and are thus shared across any thread or process.</p>\n<p>It is preferred to use a lock as a context, i.e with a \'with\' command.  This guarantees the lock is\nrelease should something go wrong.  If you can\'t use a context (for example, keeping a lock for\nmultiple steps), then make sure you add a release in your finalization step.  Releasing a lock that\nis already released will not raise an error.</p>\n<p>Lock\nMay be imported and used by any internal function or web service.\nRecommended for locking small blocks of code using as a context (with)\nLocks are assigned based on priority, lower numbers first.\nOrder within the same priority is first come, first serve.</p>\n<p>Examples:</p>\n<p>my_thing = \'printer\'\nwith Lock(resource_name=my_thing) as lock:\n# do stuff with the printer</p>\n<p># Out of the context block, so lock is automatically released.</p>\n<p>my_lock = Lock(resource_name=my_thing)\nmy_lock.acquire()  # will block\n# do stuff with the printer\nmy_lock.release()</p>\n<p>ContainerLock\nSame as Lock, except Apollo monitors the lock and aborts the container if it expires (exceeds the release_timeout).</p>\n<h2 id="libssequencer_definitions"><a href="apollo_libs_sequencer_definitions.html">libs.sequencer_definitions</a><a class="headerlink" href="#libssequencer_definitions" title="Permanent link">&para;</a></h2>\n<p>Module used for user documentation on how to use the Sequencer.</p>\n<h2 id="libsstation_configuration"><a href="apollo_libs_station_configuration.html">libs.station_configuration</a><a class="headerlink" href="#libsstation_configuration" title="Permanent link">&para;</a></h2>\n<p>This is the "user" interface to configure the Virtual Station of Apollo\nThe reason of this module is to enable the code completion for the station configuration portion since\nthe vstation code is cythonized.</p>\n<h2 id="libsuclimdocumentation"><a href="apollo_libs_uclim_documentation.html">libs.uclim.documentation</a><a class="headerlink" href="#libsuclimdocumentation" title="Permanent link">&para;</a></h2>\n<p>Python implementation of the Universal Command Line Interface Module</p>\n<p>This module give the ability to use the Apollo connections objects and give it a list of commands to be executed\nautomatically without having to code python steps to do the task.\nYou are able to add the steps to your sequences and configure them so they run against the needed connections.</p>\n<p>Here are the definitions of the inputs that uclim_cmd needs to be run at your step level.</p>\n<p>Definition of the cmds_list dictionary:</p>\n<p>secs_to_wait_before_send (int): The time to wait before sending the command in seconds.\ncmd_to_send (str): The command to send (include \n or \n if needed).\n   Use the same formatting as "format" python cmd if you want to substitute values from\n   inputdict and userdict in it.\nwait_for_phrase (str|list): What we are waiting for in return of the cmd (for example a prompt).\nUse the same formatting as "format" python cmd if you want to substitute values\nfrom inputdict and userdict in it.\nThis can be a string if you only wait for a single value or it can be a list of strings\n(each can have formatting tags in them).\nmax_time_to_wait (int): The time that we wait for the "wait_for_phrase" after the command is sent.\ncheck_if_received (str|list): At the end of execution UCLIM will check if the following string was received or not.\n  Use the same formatting as "format" python cmd if you want to substitute values from\n  inputdict and userdict in it.\nparsing_format (str|list): This can be used to parse the text that is received and to tell UCLIM where to store it.\n   This uses the search function of the parse library. (from parse import search)\ndebug_mode (bool): If True then UCLIM will output the received buffer and config data into the outputdict[\'body\']\n   variable and it will be shown in the output of the call.\nlist verify_limits: The list of limit name to verify, theses should match teh parsing_format names you want to save.</p>\n<p>For the substitution:</p>\n<p>The cmd_to_send, wait_for_phrase and check_if_received use the same algorithm.\n They use the same format as the "format" cmd of python. The variables to substitute can come</p>\n<p>From either the inputdict or the userdict. just refer to the name of the key to use.\n If the key appears in both dictionary the userdict takes precedence.</p>\n<p>Here is an example:</p>\n<p>userdict= {boardnum:\'1\', channel:\'23\'}, inputdict={prompt=\'$\'}\n   cmd: log {boardnum} --channel:{channel}\n   This would become:\n   log 1 --channel:23</p>\n<p>and for the prompt for the wait_for_phrase we could do the following:\n   \'{boardnum} {prompt}\'  That would become: \'1 $\'</p>\n<p>Same logic can also be used for check_if_received.</p>\n<p>Example of parsing_format:</p>\n<p>buffer from DUT:\n**********************************************\n81. Eureka:0 Rev-1  0xE0000000</p>\n<ol>\n<li>\n<p>Lamira:0 Rev-1  0xE0040000</p>\n</li>\n<li>\n<p>PwrMgmt EPLD Rev-2.4 (0x00000024)</p>\n</li>\n<li>\n<p>Nippon IO FPGA   Rev-1.e (0x0000010E)</p>\n</li>\n<li>\n<p>BIOS (Primary)   ver: 1.01.08, build date: 10/20/06</p>\n</li>\n</ol>\n<p>board_info_bios: bios_get_img_info() failed: BIOS_BAD_MAGIC_NUMBER - BIOS magic number not found in image header</p>\n<ol>\n<li>\n<p>BIOS (Alternate) N/A</p>\n</li>\n<li>\n<p>CPU Info:Core: e500v2 (rev 2.0), System: MPC8548E (rev 2.0)</p>\n</li>\n<li>\n<p>Memory DIMM:0Size: 512 MB, MFG JEDEC: 7F 94 FF FF FF FF FF FF</p>\n</li>\n<li>\n<p>Serial NumberJAB10470113\n**********************************************</p>\n</li>\n</ol>\n<p>Here is the parsing format that will be given to UCLIM:</p>\n<p>parsing_format = [\'PwrMgmt EPLD {PwrMgmtEPLD:>S}\', \'Nippon IO FPGA {NipponIOFPGA:>S}\', \'BIOS (Primary) {BIOS:>},\',\n  \'BIOS (Alternate) {BIOS2:>S}\', \'Core: {e500} (rev {REVNUM}), System: {MPC} ({REV2})\']</p>\n<p>You NEED (did I say you NEED....you really, really NEED to do it) to name the fields in between the {}.\nAn open {} without a name for a variable will end up in an error.\nAfter the run you would have the following variables/data in the userdict dictionary:</p>\n<p>PwrMgmtEPLD: Rev-2.4\nNipponIOFPGA: Rev-1.e\nBIOS: ver:1.01.08\nBIOS2: N/A\ne500: e500V2\nREVNUM: 2.0\nMPC: MPC8548E\nREV2: rev 2.0</p>\n<p>Full documentation can be found here: https://pypi.python.org/pypi/parse</p>\n<p>You can lookup https://localhost:4433/apollo/scripts/examples/uclim_example/help\nto get example on how to configure the UCLIM cmd function to be used in your sequence steps.</p>\n<h2 id="libsuclimuclim"><a href="apollo_libs_uclim_uclim.html">libs.uclim.uclim</a><a class="headerlink" href="#libsuclimuclim" title="Permanent link">&para;</a></h2>\n<p>Python implementation of the Universal Command Line Interface Module (UCLIM)</p>\n<p>This module gives the ability to use the Apollo connections objects by giving it a list of commands to be executed\nautomatically. The most common operations like parsing and checking if certain strings were received are available\nwithout having to do much Python coding.</p>\n<p>You are able to add the uclim_step to your sequence definition and configure these so they run against your connection.\nThere is also a uclim_direct available to use within your test step for advanced and custom usage.</p>\n<p>Some of the benefits of UCLIM are:</p>\n<ul>\n<li>fosters re-use of commands as these are separated from the connection object itself.</li>\n<li>Integrated logging for cleaner user scripts and after the fact analysis.</li>\n<li>low boilerplate for common operations like parsing, limit verification and checking if certain strings were\n   received or not.</li>\n<li>inplace substitution of userdict and config_dict variables</li>\n</ul>\n<p>UclimCmd:</p>\n<p>See the UclimCmd docstring for detailed explanation of all the parameters</p>\n<p>Order of executing:</p>\n<ol>\n<li>sleep: executed before any other command</li>\n<li>send: connection will be opened if needed and this will be send to the connection</li>\n<li>expect_phrase: verification if the expect_phrase is found or not</li>\n<li>timeout: the max amount of time to wait for the expect_phrase</li>\n<li>check_if_received: verify the check_if_received strings in the recbuf</li>\n<li>parsing_formats: parse out the data in the recbuf</li>\n<li>verify_limits: verify the parsed data according to the limits</li>\n</ol>\n<p>Note that executing of the command will raise an exception and stop immediately if a failure occurs at any of the\nabove steps.</p>\n<h2 id="libsuclimuclim_parsing"><a href="apollo_libs_uclim_uclim_parsing.html">libs.uclim.uclim_parsing</a><a class="headerlink" href="#libsuclimuclim_parsing" title="Permanent link">&para;</a></h2>\n<p>UCLIM parsing helper cmd line program\nThis little utility can be use to test parsing format, that are intended to be used with UCLIM, with static data.\ncmd line:\npython uclim_parsing.py --inputbuffer &lt;YOURFILE> --parsingfile &lt;FILE CONTAINING THE PARSING PATTERNS></p>\n<p>The input buffer file can be a dump from a DUT that you want to parse.\nThe parsingfile will be a file that contain a parsing pattern per line in the file.</p>\n<p>You can check the uclim.py documentation for details on how to create the parsing format strings.</p>\n<h2 id="toolboxbuffer_connection_proxy"><a href="toolbox_buffer_connection_proxy.html">toolbox.buffer_connection_proxy</a><a class="headerlink" href="#toolboxbuffer_connection_proxy" title="Permanent link">&para;</a></h2>\n<p>BufferConnectionProxy class definition.</p>\n<p>This class replaces the ConnectionProxy class used by the Apollo engine.\nIt takes as input a buffer log (received output from a UUT) and uses that to simulate a connected UUT.</p>\n<p>commands and responses from the send, sende, send_hidden and waitfor commands are matched to locations in\nthe supplied buffer log.</p>\n<p>If a sending command ends with \'\\r\', we search for either \'\n or \'\\n\' due to how the buffer logs usually translate\nthose characters when they echo back what we send.</p>\n<h2 id="toolboxcelery_utils"><a href="toolbox_celery_utils.html">toolbox.celery_utils</a><a class="headerlink" href="#toolboxcelery_utils" title="Permanent link">&para;</a></h2>\n<p>Contain various functions to deal with the celery api for apollo control and apollo.</p>\n<h2 id="toolboxcesiumlib_func_appname"><a href="toolbox_cesiumlib_func_appname.html">toolbox.cesiumlib_func_appname</a><a class="headerlink" href="#toolboxcesiumlib_func_appname" title="Permanent link">&para;</a></h2>\n<p>This file will contain a dictionary with cesiumlib function names and its service app names</p>\n<h2 id="toolboxcolored_stream_handler"><a href="toolbox_colored_stream_handler.html">toolbox.colored_stream_handler</a><a class="headerlink" href="#toolboxcolored_stream_handler" title="Permanent link">&para;</a></h2>\n<p>Colorized version of StreamHandler that uses colorama.</p>\n<h2 id="toolboxconnection_constants"><a href="toolbox_connection_constants.html">toolbox.connection_constants</a><a class="headerlink" href="#toolboxconnection_constants" title="Permanent link">&para;</a></h2>\n<p>Constants related to connections used by both the connection server and apollo/engine/connections.py</p>\n<p>They are kept here under /common to avoid circular references, or any imports from /engine_services into /apollo code.</p>\n<h2 id="toolboxconnection_proxy"><a href="toolbox_connection_proxy.html">toolbox.connection_proxy</a><a class="headerlink" href="#toolboxconnection_proxy" title="Permanent link">&para;</a></h2>\n<p>Connection proxy library that allows scripts to interact to a connection on the connection server.</p>\n<h2 id="toolboxconstants"><a href="toolbox_constants.html">toolbox.constants</a><a class="headerlink" href="#toolboxconstants" title="Permanent link">&para;</a></h2>\n<p>Constants used for all modules in the servers package.</p>\n<h2 id="toolboxcontainer_utils"><a href="toolbox_container_utils.html">toolbox.container_utils</a><a class="headerlink" href="#toolboxcontainer_utils" title="Permanent link">&para;</a></h2>\n<p>Container utilities used for starting Apollo containers</p>\n<h2 id="toolboxdaemon"><a href="toolbox_daemon.html">toolbox.daemon</a><a class="headerlink" href="#toolboxdaemon" title="Permanent link">&para;</a></h2>\n<p>Base class for creating a daemonized process.</p>\n<p>A daemon class referred from\n<code>http://www.jejik.com/files/examples/daemon.py</code></p>\n<p>Inspired from https://gist.github.com/Ma233/dd1f2f93db5378a29a3d1848288f520e</p>\n<h2 id="toolboxdecorators"><a href="toolbox_decorators.html">toolbox.decorators</a><a class="headerlink" href="#toolboxdecorators" title="Permanent link">&para;</a></h2>\n<p>Module that contains commonly used decorators.</p>\n<p>It is a good practice to put decorators in a separate module for unit testing, otherwise\nwe\'ll never get a chance to replace it with a mock before the class definition calls it.</p>\n<h2 id="toolboxecho_connection_proxy"><a href="toolbox_echo_connection_proxy.html">toolbox.echo_connection_proxy</a><a class="headerlink" href="#toolboxecho_connection_proxy" title="Permanent link">&para;</a></h2>\n<p>EchoConnectionProxy class definition.</p>\n<p>The EchoConnectionProxy class inherits from ConnectionProxy and overrides it\'s methods to simply echo back\neverything that is sent.  In addition, the first expect phrase provided is also echoed back.</p>\n<p>Example:</p>\n<p>echo_conn.send(\'\\r\')  --> echo_conn.recbuf == \'\\r\\n\'\necho_conn.send(\'hello\n\', \'#\')  --> echo_conn.recbuf == \'hello\n#\n\'</p>\n<h2 id="toolboxexceptions"><a href="toolbox_exceptions.html">toolbox.exceptions</a><a class="headerlink" href="#toolboxexceptions" title="Permanent link">&para;</a></h2>\n<p>Custom exceptions used by the connections package.</p>\n<h2 id="toolboxlog_utils"><a href="toolbox_log_utils.html">toolbox.log_utils</a><a class="headerlink" href="#toolboxlog_utils" title="Permanent link">&para;</a></h2>\n<p>Log file utilities</p>\n<h2 id="toolboxpool"><a href="toolbox_pool.html">toolbox.pool</a><a class="headerlink" href="#toolboxpool" title="Permanent link">&para;</a></h2>\n<p>Custom thread pool that dynamically grows from a min to a max count as needed.</p>\n<p>Designed to be a drop-in replacement for the ThreadPool class previously used.</p>\n<p>The TaskQueueManager class provides functionality for adding tasks onto the Queue that the\nworker threads pull from.  It also maintains the results for each task for a given amount of time.</p>\n<p>For every task enqueued (target function, and optional args and kwargs), a Task object is created and placed\non the Queue.  Worker threads fetch these Task objects, execute them, and give the results back to the\nTaskQueueManager which stores it using the unique identifier (uid) assigned to every task.  The Job object uses\nthe same uid to fetch these results.</p>\n<p>When a task is added using the TaskQueueManager, a Job object is returned.  This allows the caller to wait\nfor the task to be completed and fetch the results.</p>\n<p>Once instance of the TaskThreadsManager class is started, and assigned a TaskQueueManager object to use for getting\nand running tasks.  The TaskThreadsManager is responsible for maintaining a minimum number of free worker threads\navailable to execute tasks.  Each worker thread runs one task and then exits.  New threads are spawn to replace ones\nthat exit.  The TaskThreadsManager also makes sure no more than the maximum number of worker threads are created at\na given time.</p>\n<p>Tasks will remain on the queue until there is a worker thread available to execute it.</p>\n<h2 id="toolboxredis_lib"><a href="toolbox_redis_lib.html">toolbox.redis_lib</a><a class="headerlink" href="#toolboxredis_lib" title="Permanent link">&para;</a></h2>\n<p>Redis library functions</p>\n<h2 id="toolboxregistry_utils"><a href="toolbox_registry_utils.html">toolbox.registry_utils</a><a class="headerlink" href="#toolboxregistry_utils" title="Permanent link">&para;</a></h2>\n<p>Utility functions for getting various information from Apollo\'s app registry.</p>\n<p>Note:\nThis library does NOT have features to read secure information from the application registry.\nCurrently only Machine information is available to outside processes.</p>\n<h2 id="toolboxreplay_connection_proxy"><a href="toolbox_replay_connection_proxy.html">toolbox.replay_connection_proxy</a><a class="headerlink" href="#toolboxreplay_connection_proxy" title="Permanent link">&para;</a></h2>\n<p>ReplayConnectionProxy class definition.</p>\n<h2 id="toolboxretaskexceptions"><a href="toolbox_retask_exceptions.html">toolbox.retask.exceptions</a><a class="headerlink" href="#toolboxretaskexceptions" title="Permanent link">&para;</a></h2>\n<p>retask.exceptions\n~~~~~~~~~~~~~~~~~~~</p>\n<p>This module contains the set of Retask\'s exceptions.</p>\n<h2 id="toolboxretaskqueue"><a href="toolbox_retask_queue.html">toolbox.retask.queue</a><a class="headerlink" href="#toolboxretaskqueue" title="Permanent link">&para;</a></h2>\n<h2 id="toolboxretasktask"><a href="toolbox_retask_task.html">toolbox.retask.task</a><a class="headerlink" href="#toolboxretasktask" title="Permanent link">&para;</a></h2>\n<p>Task Class</p>\n<h2 id="toolboxutils"><a href="toolbox_utils.html">toolbox.utils</a><a class="headerlink" href="#toolboxutils" title="Permanent link">&para;</a></h2>\n<p>Common utility classes and functions used by all Apollo services.</p>\n<h2 id="toolboxutils_sys"><a href="toolbox_utils_sys.html">toolbox.utils_sys</a><a class="headerlink" href="#toolboxutils_sys" title="Permanent link">&para;</a></h2>\n<p>Utility for showing the system information.</p>\n<p>Note that it supports Linux, Mac and Windows operating systems.</p>\n<p>The system information includes the following information:\n- platform {system, node, release, version, machine, processor}\n- disk{path, total, used, free, percent} on the specified path\n- virtual memory {total, percent, available, used, free, active, inactive, buffers, cached} in bytes\n- swap memory {total, percent, used, free} in bytes\n- top cpu processes { top 5 processes consuming most of the cpu}\n- cpu  {cpu count, cpu % utilized}\n- uptime {uptime, load average}</p>\n<h2 id="toolboxworkspacesattributes"><a href="toolbox_workspaces_attributes.html">toolbox.workspaces.attributes</a><a class="headerlink" href="#toolboxworkspacesattributes" title="Permanent link">&para;</a></h2>\n<p>Workspace attributes module</p>\n<h2 id="toolboxworkspacesteststest_attributes"><a href="toolbox_workspaces_tests_test_attributes.html">toolbox.workspaces.tests.test_attributes</a><a class="headerlink" href="#toolboxworkspacesteststest_attributes" title="Permanent link">&para;</a></h2>\n<p>Unit tests for the toolbox.workspaces.attributes module.</p>\n<h2 id="toolboxwss_utils"><a href="toolbox_wss_utils.html">toolbox.wss_utils</a><a class="headerlink" href="#toolboxwss_utils" title="Permanent link">&para;</a></h2>\n<p>websocket related code that is shared between the Apollo engine and the web socket server process</p></div>\n        </div>\n\n        <footer class="col-md-12">\n            <hr>\n                <p>Apollo-153-0</p>\n            <p>Documentation built with <a href="https://www.mkdocs.org/">MkDocs</a>.</p>\n        </footer>\n        <script>\n            var base_url = ".",\n                shortcuts = {"search": 83, "next": 78, "help": 191, "previous": 80};\n        </script>\n        <script src="js/base.js" defer></script>\n        <script src="search/main.js" defer></script>\n\n        <div class="modal" id="mkdocs_search_modal" tabindex="-1" role="dialog" aria-labelledby="Search Modal" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>\n                <h4 class="modal-title" id="exampleModalLabel">Search</h4>\n            </div>\n            <div class="modal-body">\n                <p>\n                    From here you can search these documents. Enter\n                    your search terms below.\n                </p>\n                <form role="form">\n                    <div class="form-group">\n                        <input type="text" class="form-control" placeholder="Search..." id="mkdocs-search-query" title="Type search term here">\n                    </div>\n                </form>\n                <div id="mkdocs-search-results"></div>\n            </div>\n            <div class="modal-footer">\n            </div>\n        </div>\n    </div>\n</div><div class="modal" id="mkdocs_keyboard_modal" tabindex="-1" role="dialog" aria-labelledby="Keyboard Shortcuts Modal" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>\n                <h4 class="modal-title" id="exampleModalLabel">Keyboard Shortcuts</h4>\n            </div>\n            <div class="modal-body">\n              <table class="table">\n                <thead>\n                  <tr>\n                    <th style="width: 20%;">Keys</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td class="help shortcut"><kbd>?</kbd></td>\n                    <td>Open this help</td>\n                  </tr>\n                  <tr>\n                    <td class="next shortcut"><kbd>n</kbd></td>\n                    <td>Next page</td>\n                  </tr>\n                  <tr>\n                    <td class="prev shortcut"><kbd>p</kbd></td>\n                    <td>Previous page</td>\n                  </tr>\n                  <tr>\n                    <td class="search shortcut"><kbd>s</kbd></td>\n                    <td>Search</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <div class="modal-footer">\n            </div>\n        </div>\n    </div>\n</div>\n\n    </body>\n</html>\n\n<!--\nMkDocs version : 1.0.4\nBuild Date UTC : 2024-05-15 20:48:29\n-->\n',
  metadata=
  {
    'source': 'https://rcdn9plone.cisco.com/plone/projects/apollo/technical-docs/index.html',
    'content_type': 'text/html; charset=UTF-8',
    'title': 'Apollo User Libraries',
    'description': 'None',
    'language': 'en'
  }
  )
]
